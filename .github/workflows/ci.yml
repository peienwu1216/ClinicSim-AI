name: Simple CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  basic-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pydantic pydantic-settings
    
    - name: Check file structure
      run: |
        echo "檢查必要文件..."
        ls -la
        echo "檢查 src 目錄..."
        ls -la src/
        echo "檢查 tests 目錄..."
        ls -la tests/
        echo "✅ 文件結構檢查完成"
    
    - name: Test basic Python functionality
      run: |
        python -c "
        print('測試基本 Python 功能...')
        
        # 測試基本模組
        import os
        import sys
        import json
        from pathlib import Path
        
        print('✅ 基本模組導入成功')
        
        # 測試文件操作
        current_dir = Path('.')
        files = list(current_dir.glob('*.py'))
        print(f'✅ 找到 {len(files)} 個 Python 文件')
        
        # 測試 JSON 處理
        try:
            test_data = {'test': 'value'}
            json_str = json.dumps(test_data)
            parsed = json.loads(json_str)
            print('✅ JSON 處理正常')
        except Exception as e:
            print(f'⚠️ JSON 處理問題: {e}')
        
        print('✅ 基本功能測試完成')
        "
    
    - name: Validate JSON files
      run: |
        python -c "
        import json
        from pathlib import Path
        
        print('檢查 JSON 文件...')
        cases_dir = Path('cases')
        if cases_dir.exists():
            json_files = list(cases_dir.glob('*.json'))
            print(f'找到 {len(json_files)} 個 JSON 文件')
            
            success_count = 0
            for json_file in json_files[:3]:  # 只檢查前3個
                try:
                    with open(json_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    print(f'✅ {json_file.name} 格式正確')
                    success_count += 1
                except Exception as e:
                    print(f'⚠️ {json_file.name} 格式問題: {e}')
            
            print(f'JSON 文件檢查完成: {success_count}/{min(3, len(json_files))} 通過')
        else:
            print('⚠️ cases 目錄不存在')
        "
    
    - name: Check project files
      run: |
        python -c "
        print('檢查專案文件...')
        
        from pathlib import Path
        
        # 檢查必要文件
        required_files = ['main.py', 'app.py', 'README.md', 'LICENSE']
        found_files = []
        
        for file_name in required_files:
            if Path(file_name).exists():
                print(f'✅ {file_name} 存在')
                found_files.append(file_name)
            else:
                print(f'⚠️ {file_name} 不存在')
        
        # 檢查必要目錄
        required_dirs = ['src', 'docs', 'tests', 'cases']
        found_dirs = []
        
        for dir_name in required_dirs:
            if Path(dir_name).exists() and Path(dir_name).is_dir():
                print(f'✅ {dir_name}/ 目錄存在')
                found_dirs.append(dir_name)
            else:
                print(f'⚠️ {dir_name}/ 目錄不存在')
        
        print(f'文件檢查完成: {len(found_files)}/{len(required_files)} 文件, {len(found_dirs)}/{len(required_dirs)} 目錄')
        print('✅ 專案文件檢查完成')
        "
    
    - name: Check requirements files
      run: |
        echo "檢查 requirements 文件..."
        if [ -f "requirements.txt" ]; then
          echo "✅ requirements.txt 存在"
          echo "前5行內容:"
          head -5 requirements.txt
        else
          echo "⚠️ requirements.txt 不存在"
        fi
        
        if [ -f "requirements-base.txt" ]; then
          echo "✅ requirements-base.txt 存在"
          echo "前5行內容:"
          head -5 requirements-base.txt
        else
          echo "⚠️ requirements-base.txt 不存在"
        fi
        
        if [ -f "requirements-dev.txt" ]; then
          echo "✅ requirements-dev.txt 存在"
          echo "前5行內容:"
          head -5 requirements-dev.txt
        else
          echo "⚠️ requirements-dev.txt 不存在"
        fi
    
    - name: Test import without dependencies
      run: |
        python -c "
        print('測試模組結構...')
        
        import sys
        from pathlib import Path
        
        # 檢查 src 目錄結構
        src_dir = Path('src')
        if src_dir.exists():
            subdirs = [d for d in src_dir.iterdir() if d.is_dir()]
            print(f'✅ src 目錄包含 {len(subdirs)} 個子目錄')
            
            for subdir in subdirs:
                py_files = list(subdir.glob('*.py'))
                print(f'  - {subdir.name}/: {len(py_files)} 個 Python 文件')
        else:
            print('⚠️ src 目錄不存在')
        
        # 檢查 __init__.py 文件
        init_files = list(Path('.').rglob('__init__.py'))
        print(f'✅ 找到 {len(init_files)} 個 __init__.py 文件')
        
        print('✅ 模組結構檢查完成')
        "